// package the generated Java class lives in; no need to change this
%package "parser";

// name of the generated Java class; no need to change this
%class "Parser";

// no need to change this either
%embed {:
	// turn off automated error recovery
	@Override
	protected void recoverFromError(Symbol token, TokenStream in) throws java.io.IOException, Exception {
		super.recoverFromError(new Symbol(0), in);
	}
:};

// the list of all terminals; no need to change this
%terminals MODULE, INT, VOID, IF, ELSE, WHILE, RETURN, BREAK, BOOLEAN, PUBLIC, TRUE, FALSE,
           INT_LITERAL, STRING_LITERAL, ID, TYPE, IMPORT,
           PLUS, MINUS, TIMES, DIV, MOD, EQEQ, NEQ, LEQ, GEQ, LT, GT,
           LBRACKET, RPAREN, COMMA, RCURLY, LCURLY, SEMICOLON, RBRACKET, LPAREN, EQL;
           
// declaration of start symbol; no need to change this
%goal Module;



Module = MODULE ID LCURLY Imports Declarations RCURLY;
Imports = Import Imports | ;
Import = IMPORT ID SEMICOLON;
Declarations = Declaration Declarations | ;
Declaration = FnDec | FieldDec | TypeDec ;
FnDec = AccessSpec TypeName ID LPAREN ParaList RPAREN LCURLY Statements RCURLY ;    
FieldDec = AccessSpec TypeName ID SEMICOLON ;
TypeDec = AccessSpec TYPE ID EQL STRING_LITERAL SEMICOLON ;
AccessSpec = PUBLIC | ;
TypeName = PrimitiveType | ArrayType | ID;
NonEmptyParaList = Parameter COMMA ParaList | Parameter ;
ParaList= NonEmptyParaList | ;
Statements = Statement Statements | ;
ArrayType = PrimitiveType LBRACKET RBRACKET | ArrayType LBRACKET RBRACKET | ID LBRACKET RBRACKET ;
PrimitiveType = VOID | BOOLEAN | INT ;
Parameter = TypeName ID ;
Statement = LocalVarDeclaration | BlockOfStatements | IfStatement | WhileStatement | BreakStatement | ReturnStatement | ExpressionStatement ; 
LocalVarDeclaration = TypeName ID SEMICOLON ;
BlockOfStatements = LCURLY Statements RCURLY ;
IfStatement = IF LPAREN Expression RPAREN Statement ElseStatement ;
ElseStatement = ELSE Statement | ;
WhileStatement = WHILE LPAREN Expression RPAREN Statement ;
BreakStatement = BREAK SEMICOLON ;
ReturnStatement = RETURN ReturnStatementTail SEMICOLON ;
ReturnStatementTail = Expression | ;
ExpressionStatement = Expression SEMICOLON ;
Expression = Assignment | RHSExpression ;
Assignment = ID EQL Expression | ArrayAccess EQL Expression  ;
RHSExpression = ArithmeticExpression RHSExprTail ;
RHSExprTail = ComparisonOperator ArithmeticExpression | ;
ArrayAccess = ID LBRACKET Expression RBRACKET | ArrayAccess LBRACKET Expression RBRACKET ;
ArithmeticExpression = ArithmeticExpression AdditiveOperator Term | Term ;
AdditiveOperator = PLUS | MINUS ;
ComparisonOperator = EQEQ | NEQ | LT | LEQ | GT | GEQ ;
Term = Term MultiplicativeOperator Factor | Factor ;
MultiplicativeOperator = TIMES | DIV | MOD ;
Factor = MINUS Factor | PrimaryExpression ;
PrimaryExpression = ID | ArrayAccess | FunctionCall | ArrayExpression | INT_LITERAL | STRING_LITERAL | BooleanLiteral | ParanthesizedExpression ;
FunctionCall = ID LPAREN EmptyExpressionsList RPAREN ; 
ArrayExpression = LBRACKET NonEmptyExpressionsList RBRACKET ;
NonEmptyExpressionsList = Expression COMMA NonEmptyExpressionsList | Expression ;
EmptyExpressionsList = NonEmptyExpressionsList | ;
BooleanLiteral = TRUE | FALSE ;
ParanthesizedExpression = LPAREN Expression RPAREN ;

